/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kp0722;

import java.time.LocalDate;
import java.time.DateTimeException;
import java.io.Console;
import java.util.Scanner;

import java.util.ArrayList;
import java.util.List;

public class App {
    public static void main(String[] args) {
        Util util = new Util();

        Console console = System.console();
        if (console == null) {
            System.out.println("ERR: No Console found");
            return;
        }
        
        // Create Tools
        List<Tools> tools = new ArrayList<>();
        tools.add(new Tools("CHNS", ToolTypes.CHAINSAW, "Stihl"));
        tools.add(new Tools("LADW", ToolTypes.LADDER, "Werner"));
        tools.add(new Tools("JAKD", ToolTypes.JACKHAMMER, "DeWalt"));
        tools.add(new Tools("JAKR", ToolTypes.JACKHAMMER, "Ridgid"));

        System.out.println("**********************");
        System.out.println("*      Tool List     *");
        System.out.println("**********************");
        System.out.println("Tool Code | Type | Brand | Daily Charge");
        for (Tools tool: tools) {
            System.out.print(tool.toolCode + " | ");
            System.out.print(tool.toolType.type + " | ");
            System.out.print(tool.brand + " | ");
            System.out.println(tool.toolType.dailyCharge );
        }
        System.out.println("\n==============================================\n");
                
        Scanner sc = new Scanner(console.reader());

        Tools rentalTool = null;
        do {
            console.writer().println("Please give me the tool code you would like to rent...");
            String toolCode = sc.nextLine().replaceAll("\\s", "");
            rentalTool = util.getRentalTool(toolCode, tools);
            
            if (rentalTool == null) {
                console.format("\nERR: %s does not exist please select a code from the Tool List. \n", toolCode);
            }
        } while(rentalTool == null);

        int rentalDays = 0, discount = -1;
        do {
            console.writer().println("How many days are you going to rent this?");
            String rentalDaysStr = sc.nextLine().replaceAll("\\s", "");

            if(rentalDaysStr.matches("-?\\d+(\\.\\d+)?")) {
                rentalDays = Integer.parseInt(rentalDaysStr);
            }

            if (rentalDays <= 0) {
                console.format("\nERR: %s is either not a number, or it's not higher than 0. \n", rentalDaysStr);
            }
        } while(rentalDays <= 0);

        do {
            console.writer().println("What kind of discount percentage is there? (0-100)");
            String discountStr = sc.nextLine().replaceAll("\\s|%", "");

            if(discountStr.matches("-?\\d+(\\.\\d+)?")) {
                discount = Integer.parseInt(discountStr);
            }

            if (discount < 0 || discount > 100) {
                console.format("\nERR: %s is either not a number, or it's not somewhere between 0 and 100. \n", discountStr);
            }
        } while(discount < 0 || discount > 100);


        LocalDate checkoutDate = null;
        do {
            console.writer().println("Put in the start date of the rental... (mm-dd-yyyy)");
            String checkoutDateStr = sc.nextLine().replaceAll("\\s", "");

            String[] splitDate = checkoutDateStr.split("-");
            try {
                if(splitDate[0].matches("-?\\d+(\\.\\d+)?") && splitDate[1].matches("-?\\d+(\\.\\d+)?")  && splitDate[2].matches("-?\\d+(\\.\\d+)?") ) {
                    checkoutDate = LocalDate.of(Integer.parseInt(splitDate[2]), Integer.parseInt(splitDate[0]), Integer.parseInt(splitDate[1]));
                } else {
                    console.format("\nERR: %s format is incorrect (mm-dd-yyyy). \n", checkoutDateStr);
                }
            } catch(DateTimeException e) {
                console.format("\nERR: %s format is incorrect (mm-dd-yyyy). \n", checkoutDateStr);
            }
            
        } while(checkoutDate == null);


        Checkout checkout = new Checkout();
        checkout.RentATool(rentalTool, rentalDays, discount, checkoutDate);
        checkout.agreement.displayAgreement();
    }
}
